// Generated by gencpp from file pandar_msgs/PandarGps.msg
// DO NOT EDIT!


#ifndef PANDAR_MSGS_MESSAGE_PANDARGPS_H
#define PANDAR_MSGS_MESSAGE_PANDARGPS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pandar_msgs
{
template <class ContainerAllocator>
struct PandarGps_
{
  typedef PandarGps_<ContainerAllocator> Type;

  PandarGps_()
    : stamp()
    , used(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , fineTime(0)
    , flag(0)  {
    }
  PandarGps_(const ContainerAllocator& _alloc)
    : stamp()
    , used(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , fineTime(0)
    , flag(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _used_type;
  _used_type used;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint16_t _month_type;
  _month_type month;

   typedef uint16_t _day_type;
  _day_type day;

   typedef uint16_t _hour_type;
  _hour_type hour;

   typedef uint16_t _minute_type;
  _minute_type minute;

   typedef uint16_t _second_type;
  _second_type second;

   typedef uint32_t _fineTime_type;
  _fineTime_type fineTime;

   typedef uint32_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::pandar_msgs::PandarGps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pandar_msgs::PandarGps_<ContainerAllocator> const> ConstPtr;

}; // struct PandarGps_

typedef ::pandar_msgs::PandarGps_<std::allocator<void> > PandarGps;

typedef boost::shared_ptr< ::pandar_msgs::PandarGps > PandarGpsPtr;
typedef boost::shared_ptr< ::pandar_msgs::PandarGps const> PandarGpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pandar_msgs::PandarGps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pandar_msgs::PandarGps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pandar_msgs::PandarGps_<ContainerAllocator1> & lhs, const ::pandar_msgs::PandarGps_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.used == rhs.used &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.minute == rhs.minute &&
    lhs.second == rhs.second &&
    lhs.fineTime == rhs.fineTime &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pandar_msgs::PandarGps_<ContainerAllocator1> & lhs, const ::pandar_msgs::PandarGps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pandar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pandar_msgs::PandarGps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pandar_msgs::PandarGps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pandar_msgs::PandarGps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pandar_msgs::PandarGps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pandar_msgs::PandarGps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pandar_msgs::PandarGps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pandar_msgs::PandarGps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a075038e2dd27f000f34f827c3e40eec";
  }

  static const char* value(const ::pandar_msgs::PandarGps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa075038e2dd27f00ULL;
  static const uint64_t static_value2 = 0x0f34f827c3e40eecULL;
};

template<class ContainerAllocator>
struct DataType< ::pandar_msgs::PandarGps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pandar_msgs/PandarGps";
  }

  static const char* value(const ::pandar_msgs::PandarGps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pandar_msgs::PandarGps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"uint32 used\n"
"uint16 year\n"
"uint16 month\n"
"uint16 day\n"
"uint16 hour\n"
"uint16 minute\n"
"uint16 second\n"
"uint32 fineTime\n"
"uint32 flag\n"
;
  }

  static const char* value(const ::pandar_msgs::PandarGps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pandar_msgs::PandarGps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.used);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.minute);
      stream.next(m.second);
      stream.next(m.fineTime);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PandarGps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pandar_msgs::PandarGps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pandar_msgs::PandarGps_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "used: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.used);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minute: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.minute);
    s << indent << "second: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.second);
    s << indent << "fineTime: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fineTime);
    s << indent << "flag: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDAR_MSGS_MESSAGE_PANDARGPS_H
